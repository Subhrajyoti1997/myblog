package com.blog.myblog5.config;

import com.blog.myblog5.security.CustomUserDetailsService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;

//for spring security adding spring security dependency in pom.xml then a login page automatically created and all urls are secured
//and username is always "user" and password is generated in console everytime a new password
//if we want our login credentials then first in application properties user ,password ,roles set
//and then this
//In configuration class  we can control if i log in as admin what happen,if i login as customer what happen,
//which url who can access all controlling do here
@Configuration
@EnableWebSecurity
@EnableGlobalMethodSecurity(prePostEnabled = true)
//only after adding this(EnableGlobalMethodSecurity) @Preauthorised will work in post  controller
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    //to do basic authentication
    //after do this login pages changes before it default in chrome
    //in postman url gives 401 unauthorized bcz without log in url not work
    //so to do that go to authorization in postman and select basic auth and give username password
    //press ctrl + o to get all parent class methods
    // @Bean when applied on a method , whatever the  object , method is returning that object is being maintained by springBoot
    @Autowired
    private CustomUserDetailsService userDetailsService;//loadUserByUserName() method
    @Bean
    PasswordEncoder passwordEncoder(){

        return new BCryptPasswordEncoder();
    }

    @Override
    @Bean
    protected AuthenticationManager authenticationManager() throws Exception {
        return super.authenticationManager();
    }

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        //hcd4ah  for remembering
        http.csrf().disable()
                .authorizeRequests()
                .antMatchers(HttpMethod.GET,"/api/**").permitAll()
   //after postmapping in authcontroller do below line bcz we want all access it
                .antMatchers("/api/auth/**").permitAll()
                .anyRequest()
                .authenticated()
                .and()
                .httpBasic();
    }
//if i don't want in memory location use below lines and make class CustomUserDetailsService(i want to store in database)
    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());
    }
    //if i not want to store the username and password in application.properties then do below lines i.e store in inMeroryLocation
//This line ".antMatchers(HttpMethod.GET,"/api/**").permitAll()" added after userDetailsService method work done
//    @Override
//    @Bean
//    protected UserDetailsService userDetailsService() {
//        UserDetails happy = User.builder().username("bapi").password(passwordEncoder().encode("bapi123")).roles("USER").build();
//        UserDetails admin = User.builder().username("admin").password(passwordEncoder().encode("admin")).roles("ADMIN").build();
//        return new InMemoryUserDetailsManager(happy, admin);
//    }
    //after doing this much and run password is autogenerated in console
    //so i not want password auto generated ,i want which i given above lines to  be encoded so for that
    // use this lines @Bean
    //    PasswordEncoder passwordEncoder(){
    //        return new BCryptPasswordEncoder();
    //and then put in this password(passwordEncoder().encode("password"))inside this line UserDetails happy = User.builder().username("happy").password("password").roles("USER").build();
        //and 2nd line also

}
//if we don't encrypt password we loosing security
